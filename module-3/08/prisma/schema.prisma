// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  roleId    Int      @default(1)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
}

model Branch {
  id         Int      @id @default(autoincrement())
  branchName String
  location   String   @db.VarChar(50)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Class      Class[]
  managerId  Int?     @unique
  manager    Manager? @relation(fields: [managerId], references: [id])
}

model Manager {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch?
}

model Class {
  id              Int               @id @default(autoincrement())
  branchId        Int
  branch          Branch            @relation(fields: [branchId], references: [id])
  name            String
  startAt         DateTime
  endAt           DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MapStudentClass MapStudentClass[]
}

model Student {
  id              Int               @id @default(autoincrement())
  username        String
  email           String
  password        String
  isGraduated     Boolean
  program         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MapStudentClass MapStudentClass[]
}

model MapStudentClass {
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])
  studentId Int
  student   Student @relation(fields: [studentId], references: [id])

  @@id([classId, studentId])
}
